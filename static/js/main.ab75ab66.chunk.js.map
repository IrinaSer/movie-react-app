{"version":3,"sources":["components/MovieItem.jsx","components/MovieTabs.jsx","components/App.jsx","utils/api.js","serviceWorker.js","index.js"],"names":["classNames","require","MovieItem","state","willWatch","this","props","movie","removeMovie","addMovieToWillWatch","removeMovieToWillWatch","btnClass","className","src","backdrop_path","poster_path","alt","title","vote_average","onClick","setState","type","bind","React","Component","MovieTabs","getClass","value","active","sort_by","handleClick","updateSortBy","nextProps","nextState","App","handlePageClick","e","selectedPage","selected","offset","perPage","currentPage","getMovies","fetch","then","response","json","data","movies","results","page","pageCount","total_pages","updateMovies","filter","item","id","updateMoviesWillWatch","moviesWillWatch","prevProps","prevState","map","key","length","previousLabel","nextLabel","breakLabel","breakClassName","marginPagesDisplayed","pageRangeDisplayed","onPageChange","containerClassName","subContainerClassName","activeClassName","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ab75ab66.chunk.js","sourcesContent":["import React from \"react\";\nconst classNames = require(\"classnames\");\n\nclass MovieItem extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      willWatch: false,\n    };\n  }\n\n  render() {\n    const { movie, removeMovie, addMovieToWillWatch, removeMovieToWillWatch } = this.props;\n    const toggleWillWatch = () => {\n      this.setState({\n        willWatch: !this.state.willWatch,\n      });\n      if (this.state.willWatch) {\n        removeMovieToWillWatch(movie);\n      } else {\n        addMovieToWillWatch(movie);\n      }\n    };\n    const btnClass = classNames({\n      \"btn btn-success\": this.state.willWatch,\n      \"btn btn-secondary\": !this.state.willWatch,\n    });\n    return (\n      <div className=\"card\">\n        <img className=\"card-img-top\" src={`http:image.tmdb.org/t/p/w500${movie.backdrop_path || movie.poster_path}`} alt={movie.title} />\n        <div className=\"card-body\">\n          <h6 className=\"card-title\">{movie.title}</h6>\n          <div className=\"d-flex justify-content-between align-items-center\">\n            <p className=\"mb-0\">Rating: {movie.vote_average}</p>\n            <button onClick={toggleWillWatch} type=\"button\" className={btnClass}>\n              {this.state.willWatch ? \"Remove Will Watch\" : \"Add Will Watch\"}\n            </button>\n          </div>\n        </div>\n        <button onClick={removeMovie.bind(this, movie)}>Delete movie</button>\n      </div>\n    );\n  }\n}\n\nexport default MovieItem;\n","import React from \"react\";\nconst classNames = require(\"classnames\");\n\nclass MovieTabs extends React.Component {\n  shouldComponentUpdate(nextProps, nextState) {\n    if (nextProps.sort_by !== this.props.sort_by) {\n      return true;\n    }\n    return false;\n  }\n  getClass = (value) => {\n    return classNames({\n      \"nav-link\": true,\n      active: this.props.sort_by === value,\n    });\n  };\n\n  handleClick = (value) => () => {\n    this.props.updateSortBy(value);\n  };\n  render() {\n    return (\n      <ul className=\"tabs nav nav-pills\">\n        <li className={this.getClass(\"popularity.desc\")} onClick={this.handleClick(\"popularity.desc\")}>\n          <div className=\"nav-link\">Popularity desc</div>\n        </li>\n        <li className={this.getClass(\"revenue.desc\")} onClick={this.handleClick(\"revenue.desc\")}>\n          <div className=\"nav-link\">Revenue desc</div>\n        </li>\n        <li className={this.getClass(\"vote_average.desc\")} onClick={this.handleClick(\"vote_average.desc\")}>\n          <div className=\"nav-link\">Vote average desc</div>\n        </li>\n      </ul>\n    );\n  }\n}\n\nexport default MovieTabs;\n","import React from \"react\";\nimport MovieItem from \"./MovieItem\";\nimport MovieTabs from \"./MovieTabs\";\nimport ReactPaginate from \"react-paginate\";\nimport { API_URL, API_KEY_3 } from \"../utils/api\";\nimport \"../App.css\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      movies: [],\n      moviesWillWatch: [],\n      sort_by: \"popularity.desc\",\n      offset: 0,\n      perPage: 20,\n      currentPage: 1,\n      pageCount: 0,\n    };\n    this.handlePageClick = this.handlePageClick.bind(this);\n  }\n  handlePageClick = (e) => {\n    const selectedPage = e.selected;\n    const offset = selectedPage * this.state.perPage;\n\n    this.setState(\n      {\n        currentPage: selectedPage + 1,\n        offset: offset,\n      },\n      () => {\n        this.getMovies();\n      }\n    );\n  };\n\n  componentDidMount() {\n    this.getMovies();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.sort_by !== this.state.sort_by) {\n      this.getMovies();\n    }\n  }\n\n  getMovies = () => {\n    fetch(`${API_URL}/discover/movie?api_key=${API_KEY_3}&sort_by=${this.state.sort_by}&page=${this.state.currentPage}`)\n      .then((response) => {\n        return response.json();\n      })\n      .then((data) => {\n        this.setState({\n          movies: data.results,\n          currentPage: data.page,\n          pageCount: data.total_pages,\n        });\n      });\n  };\n\n  removeMovie = (movie) => {\n    const updateMovies = this.state.movies.filter(function (item) {\n      return item.id !== movie.id;\n    });\n    this.setState({\n      movies: updateMovies,\n    });\n  };\n\n  addMovieToWillWatch = (movie) => {\n    const updateMoviesWillWatch = [...this.state.moviesWillWatch, movie];\n\n    this.setState({\n      moviesWillWatch: updateMoviesWillWatch,\n    });\n  };\n\n  removeMovieToWillWatch = (movie) => {\n    const updateMoviesWillWatch = this.state.moviesWillWatch.filter(function (item) {\n      return item.id !== movie.id;\n    });\n    this.setState({\n      moviesWillWatch: updateMoviesWillWatch,\n    });\n  };\n\n  updateSortBy = (value) => {\n    this.setState({\n      sort_by: value,\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"row mt-4\">\n          <div className=\"col-9\">\n            <div className=\"row mb-4\">\n              <div className=\"col-12\">\n                <MovieTabs sort_by={this.state.sort_by} updateSortBy={this.updateSortBy} />\n              </div>\n            </div>\n            <div className=\"row\">\n              {this.state.movies.map((movie) => {\n                return (\n                  <div className=\"col-6 mb-4\" key={movie.id}>\n                    <MovieItem movie={movie} removeMovie={this.removeMovie} addMovieToWillWatch={this.addMovieToWillWatch} removeMovieToWillWatch={this.removeMovieToWillWatch} />\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n          <div className=\"col-3\">\n            <p>Will watch: {this.state.moviesWillWatch.length}</p>\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col-12\">\n            <ReactPaginate\n              previousLabel={\"prev\"}\n              nextLabel={\"next\"}\n              breakLabel={\"...\"}\n              breakClassName={\"break-me\"}\n              pageCount={this.state.pageCount}\n              marginPagesDisplayed={2}\n              pageRangeDisplayed={5}\n              onPageChange={this.handlePageClick}\n              containerClassName={\"pagination\"}\n              subContainerClassName={\"pages pagination\"}\n              activeClassName={\"active\"}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","export const API_URL = \"https://api.themoviedb.org/3\";\n\nexport const API_KEY_3 = \"3f4ca4f3a9750da53450646ced312397\";\n\nexport const API_KEY_4 =\n    \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIzZjRjYTRmM2E5NzUwZGE1MzQ1MDY0NmNlZDMxMjM5NyIsInN1YiI6IjVhYzlmNWRkOTI1MTQxNjJhZTA1Njk0NiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.Fc4f9DVB6pFWh6hIjYe0NCC4pImdmNzDIfi_3Nb3tC4\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render( < React.StrictMode > < App / > < /React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}